/*
cleaning data
handling invalid data
casting datatype to correct data type
checking for missing values in the table from the bronze layer
standarization of data
handing wrong date type 
*/


Create or alter procedure silver.load_silver as
begin
--- inserting cleaned data in silver.cust_info from bronze.cust_info
declare @batch_start datetime ,@batch_end datetime
begin try
		set @batch_start = getdate()
			print '>> Truncating table silver.crm_cust_info'
			truncate table silver.crm_cust_info
			print '>> Inserting table silver.crm_cust_info'
			insert into silver.crm_cust_info (
				cst_id,
				cst_key,
				cst_firstname,
				cst_lastname,
				cst_marital_status,
				cst_gndr,
				cst_create_date
			)
			select cst_id,cst_key,
					trim(cst_firstname) as cst_firstname,
					trim(cst_lastname) as cst_lastname,
					case when UPPER(trim(cst_marital_status))='S' then 'Single'
						when UPPER(TRIM( cst_marital_status)) = 'M' then 'Married'
						else 'n/a'
						end as cst_marital_status,
					case when UPPER(trim(cst_gndr))='F' then 'Female'
						when UPPER(TRIM( cst_gndr)) = 'M' then 'Male'
						else 'n/a'
						end as cst_gndr,
					cst_create_date
					from (
					select *,
					ROW_NUMBER() over(partition by cst_id order by cst_create_date desc) as flag_date
					from bronze.crm_cust_info
					) t
					where t.flag_date =1

			---inserting cleaned data in silver.prd_info from bronze.prd_info
			print '>> Truncating table silver.crm_prd_info'
			truncate table silver.crm_prd_info
			print '>> Inserting table silver.crm_prd_info'
			insert into silver.crm_prd_info(
											prd_id,
											prd_key,	
											prd_nm,
											cat_id,
											cat_prd_key,
											prd_cost ,
											prd_line,
											prd_start_dt,
											prd_end_dt)
				select 
					prd_id,
					prd_key,
					prd_nm,
					trim(replace(SUBSTRING(prd_key,1,5),'-','_' )) as cat_id,
					SUBSTRING(prd_key,7,LEN(prd_key)) as cat_prd_key,
					coalesce(prd_cost,0) as prd_cost,
					CASE WHEN prd_line = 'R' then 'Road'
						 when prd_line = 'M' then 'Mountain'
						 when prd_line = 'S' then 'Other Sales'
						 when prd_line = 'T' then 'Touring'
						 else 'n/a' end as prd_line,
					prd_start_dt,
					dateadd(day,-1,lead(prd_start_dt) over (partition by prd_key order by prd_start_dt)) as prd_end_dt
					from bronze.crm_prd_info 

			--- inserting cleaned data in silver.sales_details from bronze.sales_details

			print '>> Truncating table silver.crm_sales_details'
			truncate table silver.crm_sales_details
			print '>> Inserting table silver.crm_sales_details'
			insert into silver.crm_sales_details(
												sls_ord_num,
												sls_prd_key,
												sls_cust_id,
												sls_order_dt,
												sls_ship_dt,
												sls_due_dt,
												sls_sales,
												sls_quantity,
												sls_price 
												)
			select sls_ord_num,
					sls_prd_key,
					sls_cust_id,
					case 
						when LEN(sls_order_dt) != 8 then null
						else
						cast(CAST(sls_order_dt AS varchar) AS date) end as sls_order_dt,
					case 
						when LEN(sls_ship_dt) != 8 then null
						else
						cast(CAST(sls_ship_dt AS varchar) AS date) end as sls_ship_dt,
					case 
						when LEN(sls_due_dt) != 8 then null
						else
						cast(CAST(sls_due_dt AS varchar) AS date) end as sls_due_dt,
					case 
						when sls_sales IS NULL  or sls_sales <= 0 OR sls_sales != sls_quantity * abs(sls_price)
						then sls_quantity * abs(sls_price) 
						else sls_sales end sls_sales,
					sls_quantity,
					case 
						when sls_price IS null OR sls_price <= 0 
						then ABS(sls_sales)/nullif(sls_quantity,0)
						else sls_price end as sls_price
					from bronze.crm_sales_details

			--- ----------------------------------------------------------------

			----------------inserting erp data from bronze to silver layer

			--------------------------------------------------------------------

			--- cleaning and inserting extra cus data from bronze layer to the silver layer

			print '>> Truncating table silver.erp_cust_az12'
			truncate table silver.erp_cust_az12
			print '>> Inserting table silver.erp_cust_az12'
			insert into silver.erp_cust_az12(
					cid,
					bdate,gen
			)
			select 	case when cid like 'NAS%' 
					then SUBSTRING(cid,4,LEN(cid))
					else cid end as cid,
					bdate,
					case when gen Is null THEN 'n/a' 
						 when gen='M' then 'Male'
						 when gen='F' then 'Female'
					else gen end as gen
					from bronze.erp_cust_az12

			----standarizing erp cust loc data

			print '>> Truncating table silver.erp_loc_a101'
			truncate table silver.erp_loc_a101
			print '>> Inserting table silver.erp_loc_a101'
			insert into silver.erp_loc_a101(
											cid,
											country
			)
			select REPLACE(cid,'-','') cid,
					case when trim(upper(country)) IS null
					then 'unknown' else trim(upper(country)) 
					end country 
					from bronze.erp_loc_a101

			---

			print '>> Truncating table silver.erp_px_cat_g1v2'
			truncate table silver.erp_px_cat_g1v2
			print '>> Inserting table silver.erp_px_cat_g1v2'
			insert into silver.erp_px_cat_g1v2(
									id,
									cat,
									subcat,
									maintenance
				 
			)
			select id,
					cat,
					subcat,
					maintenance
					 from bronze.erp_px_cat_g1v2

		set @batch_end = getdate()
		print '>>> ' + cast (datediff(second,@batch_end,@batch_start) as nvarchar(10)) +' seconds'
	end try
	begin catch
		print '=============================='
		print 'Error_message' + Error_message()
		print 'Error_no' + Error_number()
		print 'Error_state' + Error_state()
	end catch
end
